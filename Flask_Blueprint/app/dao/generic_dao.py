"""This DAO represents the minimum entity to be used as DAO. Can be used as base class or totally rewritten."""

from app.services.db import get_db_connection

class BaseDAO:
    """
    Base Data Access Object class for handling database operations.

    Attributes:
        table (str): The name of the database table this DAO is associated with.
        connection: The database connection object.
    """
    def __init__(self):
        """
        Initializes the BaseDAO with a specific table name and database connection.
        """
        self.table = "users"
        self.connection = get_db_connection()

    def generic_get_all(self):
        """
        Fetches all records from the database table.

        Returns:
            list: A list of tuples representing each record fetched from the table.
        """
        query = f"SELECT * FROM {self.table}"
        cursor = self.connection.cursor()
        cursor.execute(query)
        data = cursor.fetchall()
        return data

    def generic_insert(self, insert_data:dict):
        """
        Inserts a new record into the database table.

        Args:
            insert_data (dict): A dictionary containing column-value pairs to be inserted.

        Returns:
            int: The auto-generated ID of the newly inserted record.
        """
        keys = insert_data.keys()
        values = insert_data.values()
        query = f"INSERT INTO {self.table} ({','.join(keys)}) VALUES ({','.join(values)});"
        cursor = self.connection.cursor()
        cursor.execute(query)
        new_id = cursor.lastrowid  # Retrieves the last inserted ID
        self.connection.commit()
        return new_id  # Return the autogenerated ID
